'use strict';

var dom = require('svelte-native/dom');
var nativescriptUiAutocomplete = require('nativescript-ui-autocomplete');

class SuggestionViewElement extends dom.NativeElementNode {
    constructor() {
        super('suggestionView', nativescriptUiAutocomplete.SuggestionView, "suggestionView", { "suggestionItemTemplate": dom.NativeElementPropType.Value, "suggestionViewHeight": dom.NativeElementPropType.Value });
        this._templateComponent = null;
    }
    get itemTemplateComponent() {
        if (!this._templateComponent) {
            let templateEl = this.childNodes.find(n => n.tagName == "template");
            if (!templateEl)
                return null;
            this._templateComponent = templateEl;
        }
        return this._templateComponent.component;
    }
}
class RadAutoCompleteTextViewElement extends dom.NativeViewElementNode {
    constructor() {
        super('radAutoCompleteTextView', nativescriptUiAutocomplete.RadAutoCompleteTextView, null, {
            "closeButtonImageSrc": dom.NativeElementPropType.Value,
            "completionMode": dom.NativeElementPropType.Value,
            "displayMode": dom.NativeElementPropType.Value,
            "filteredItems": dom.NativeElementPropType.Value,
            "itemViewLoader": dom.NativeElementPropType.Value,
            "layoutMode": dom.NativeElementPropType.Value,
            "loadSuggestionsAsync": dom.NativeElementPropType.Value,
            "minimumCharactersToSearch": dom.NativeElementPropType.Value,
            "noResultsText": dom.NativeElementPropType.Value,
            "readOnly": dom.NativeElementPropType.Value,
            "selectedTokens": dom.NativeElementPropType.Value,
            "showCloseButton": dom.NativeElementPropType.Value,
            "suggestMode": dom.NativeElementPropType.Value,
            "suggestionView": dom.NativeElementPropType.Value,
            "text": dom.NativeElementPropType.Value,
            "items": dom.NativeElementPropType.Value,
            "hint": dom.NativeElementPropType.Value
        });
        this.nativeElement.itemViewLoader = (viewType) => this.loadView(viewType);
        this.nativeView.on(nativescriptUiAutocomplete.RadAutoCompleteTextView.itemLoadingEvent, (args) => { this.updateListItem(args); });
    }
    loadView(viewType) {
        if (viewType != nativescriptUiAutocomplete.AutoCompleteViewType.ItemView)
            return null;
        let suggestionView = this.nativeView.suggestionView;
        if (!suggestionView || !suggestionView.__SvelteNativeElement__)
            return;
        let componentClass = suggestionView.__SvelteNativeElement__.itemTemplateComponent;
        if (!componentClass)
            return null;
        dom.logger.debug("creating view for " + viewType);
        let wrapper = dom.createElement('StackLayout');
        wrapper.setStyle("padding", 0);
        wrapper.setStyle("margin", 0);
        let nativeEl = wrapper.nativeView;
        let builder = (props) => {
            let componentInstance = new componentClass({
                target: wrapper,
                props: props
            });
            nativeEl.__SvelteComponent__ = componentInstance;
        };
        nativeEl.__SvelteComponentBuilder__ = builder;
        return nativeEl;
    }
    updateListItem(args) {
        let componentInstance;
        let view = args.view;
        //if we are a svelte component, update our props
        if (!view)
            return;
        if (!view.__SvelteComponent__) {
            if (view.__SvelteComponentBuilder__) {
                dom.logger.debug("mounting to view " + view + " with props " + Object.keys(args.data).join(","));
                view.__SvelteComponentBuilder__({ item: args.data });
                view.__SvelteComponentBuilder__ = null;
                return;
            }
        }
        if (view.__SvelteComponent__) {
            componentInstance = view.__SvelteComponent__;
        }
        if (componentInstance) {
            dom.logger.debug("updating view " + view + " with props " + Object.keys(args.data).join(","));
            componentInstance.$set({ item: args.data });
        }
    }
    addToken(token) {
        return this.nativeView.addToken(token);
    }
    insertTokenAtIndex(token, index) {
        return this.nativeView.insertTokenAtIndex(token, index);
    }
    removeAllTokens() {
        return this.nativeView.removeAllTokens();
    }
    removeToken(token) {
        return this.nativeView.removeToken(token);
    }
    removeTokenAtIndex(index) {
        return this.nativeView.removeTokenAtIndex(index);
    }
    resetAutoComplete() {
        return this.nativeView.resetAutoComplete();
    }
    tokenAtIndex(index) {
        return this.nativeView.tokenAtIndex(index);
    }
    tokens() {
        return this.nativeView.tokens();
    }
    static register() {
        dom.registerElement('radAutoCompleteTextView', () => new RadAutoCompleteTextViewElement());
        dom.registerElement('suggestionView', () => new SuggestionViewElement);
    }
}

module.exports = RadAutoCompleteTextViewElement;
