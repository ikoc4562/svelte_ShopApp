'use strict';

var dom = require('svelte-native/dom');
var nativescriptUiChart = require('nativescript-ui-chart');

class BaseChartElement extends dom.NativeViewElementNode {
    constructor(tagName, viewClass) {
        super(tagName, viewClass, null, { "series": dom.NativeElementPropType.ObservableArray,
            "annotations": dom.NativeElementPropType.ObservableArray,
            "palettes": dom.NativeElementPropType.ObservableArray });
    }
}
class PieChartElement extends BaseChartElement {
    constructor() {
        super('radPieChart', nativescriptUiChart.RadPieChart);
    }
}
class CartesianChartElement extends BaseChartElement {
    constructor() {
        super('radCartesianChart', nativescriptUiChart.RadCartesianChart);
    }
}
class PaletteElement extends dom.NativeElementNode {
    constructor() {
        super('pallete', nativescriptUiChart.Palette, "palettes", { "entries": dom.NativeElementPropType.ObservableArray });
    }
}
class ChartSeriesElement extends dom.NativeElementNode {
    constructor(tagName, elClass) {
        super(tagName, elClass, "series", { "seriesName": dom.NativeElementPropType.Value });
    }
}
class Charts {
    static register() {
        const registerConfigElement = (tag, native, parentProp = null) => dom.registerNativeConfigElement(tag, () => native, parentProp);
        const registerSeries = (tag, native) => dom.registerElement(tag, () => new ChartSeriesElement(tag, native));
        //chart types
        dom.registerElement('radPieChart', () => new PieChartElement());
        dom.registerElement('radCartesianChart', () => new CartesianChartElement());
        //series types
        registerSeries('pieSeries', nativescriptUiChart.PieSeries);
        registerSeries('donutSeries', nativescriptUiChart.DonutSeries);
        registerSeries('lineSeries', nativescriptUiChart.LineSeries);
        registerSeries('splineSeries', nativescriptUiChart.SplineSeries);
        registerSeries('splineAreaSeries', nativescriptUiChart.SplineAreaSeries);
        registerSeries('areaSeries', nativescriptUiChart.AreaSeries);
        registerSeries('barSeries', nativescriptUiChart.BarSeries);
        registerSeries('rangeBarSeries', nativescriptUiChart.RangeBarSeries);
        registerSeries('bubbleSeries', nativescriptUiChart.BubbleSeries);
        registerSeries('scatterBubbleSeries', nativescriptUiChart.ScatterBubbleSeries);
        registerSeries('scatterSeries', nativescriptUiChart.ScatterSeries);
        registerSeries('candlestickSeries', nativescriptUiChart.CandlestickSeries);
        registerSeries('OhlcSeries', nativescriptUiChart.OhlcSeries);
        //axes types
        registerConfigElement('categoricalAxis', nativescriptUiChart.CategoricalAxis);
        registerConfigElement('dateTimeCategoricalAxis', nativescriptUiChart.DateTimeCategoricalAxis);
        registerConfigElement('dateTimeContinuousAxis', nativescriptUiChart.DateTimeContinuousAxis);
        registerConfigElement('linearAxis', nativescriptUiChart.LinearAxis);
        registerConfigElement('logarithmicAxis', nativescriptUiChart.LogarithmicAxis);
        //grid
        registerConfigElement('radCartesianChartGrid', nativescriptUiChart.RadCartesianChartGrid, "grid");
        //legend
        registerConfigElement('radLegendView', nativescriptUiChart.RadLegendView, "legend");
        //palette
        registerConfigElement('paletteEntry', nativescriptUiChart.PaletteEntry, "entries");
        dom.registerElement('palette', () => new PaletteElement());
        //Trackball
        registerConfigElement('trackball', nativescriptUiChart.Trackball, "trackball");
        //Annotations
        registerConfigElement('chartGridLineAnnotation', nativescriptUiChart.ChartGridLineAnnotation, "annotations");
        registerConfigElement('chartPlotBandAnnotation', nativescriptUiChart.ChartPlotBandAnnotation, "annotations");
    }
}

module.exports = Charts;
